/* 
* Less is more;
* Minmal concepts, minimal keyword and symbols
* Static programming language with type infer
* Fast, beginner friendly general perpouse programming langu.
* Immutablity first;
*/



/*-------------------
*     Constants 
*--------------------
* Cann't change after initialized.
* It's evealuted at compile time.
*/

/* pattern */
const_name :: <value>;

/* example */
NAME :: "John Doe";
PI :: 3.14159;
e :: 2.17;



/*-------------------
*     Built-in Types 
*--------------------

/* Data type        Example 
** ---------------------------
** int              x :: 10;
** float            x :: 10.0;
** bool             x :: false;
** string           x :: "hello";
** char             x :: 'c';
** array            x :: [1, 2, 3];
** list             x :: ['c', "hello", 1];
**
*/

/*-------------------
*     Variables
*--------------------
/* could be changed after initialize; */

var_name := value;
var_name: <type> = <value>;

/* -------------------- */
age := 42;
age = 43;


/*-------------------
**    String
** immutable collection of char.
** 
*--------------------
name: string = "John Doe";
my_name := "John Doe";

/* multi-line string */
par := """
There is 10 types of people in the world
who knows binary and who don't.""";

/* string slice */
varname[start..end];
name[0] /* => J */
name[0..4] /* => John */
name[..4] /* => John */
name[6..] /* => Doe */
name[..] /* => John Doe */

/* negative indexing */
name[-1]; /* => e */
name[-3..]; /* => Doe */
name[..-4]; /* => John */
name[-8..-4]; /* => John */

/*-------------------
** Array
** same type data type surround by []
** immutable 
*--------------------
numbers := [1, 2, 3, 4];
numbers[0] = 10; /* error */

/* which one */
numbers: array[int] = [1, 2, 3, 4];
numbers: array[int, 10] = [1, 2, 3, 4];
numbers += 9..14;

/*-------------------
** List
** not same type data type surround by []
** 
*--------------------
my_list: list [string, int, float] = ["milk", 1, 3.12, "hello"];
person: list[string, int];
person = ["John Doe", 42, "London"];


/*-------------------
** if
** 
** 
*--------------------
age := 5;
is_adult: false;
if age >= 18 {
    is_adult = true;
} else {
    is_adult = false;
}

/* if expression */    
is_adult: bool = if age > = 18 {true;} else {false;}



/*-------------------
** for
** 
** 
*--------------------
numbers := [10, 20, 30];

for number in numbers {
    print(number);
}

/*-------------------
** function
** 
** 
*--------------------
add :: (x: int, y: int) -> int {
	return x + y;
}

/* implicit return */
add :: (x: int, y: int) -> int = x + y;

http_error :: (s: string) -> (int, int) {
    return 0, 1;
}


