/* 
* Less is more;
* Minmal concepts, minimal keyword and symbols
* Static programming language with type infer
* Fast, beginner friendly general perpouse programming langu.
* Immutablity first;
*/



/*-------------------
*     Constants 
*--------------------
* Cann't change after initialized.
* It's evealuted at compile time.
*/

/* pattern */
CONST_NAME :: <value>;

/* example */
NAME :: "John Doe";
PI :: 3.14159;
e :: 2.17;



/*-------------------
*     Built-in Types 
*--------------------
** ---------------------------
/* Data type        Example 
** ---------------------------
** int              x :: 10;
** float            x :: 10.0;
** bool             x :: false;
** string           x :: "hello";
** char             x :: 'c';
** array            x :: [1, 2, 3];
** list             x :: ['c', "hello", 1];
** map              x :: ["a": "1", "b": "2"];
*/

/*-------------------
*     Operators
*--------------------
  +
  -
  *
  /
  //
  **
  ++
  --
  ==
  !=
  in
  not in
  is 
  is not


/*-------------------
** Array
** same type data type surround by []
** immutable 
*--------------------
numbers := [1, 2, 3, 4];
numbers[0] = 10; /* error */

/* which one */
numbers: array[int] = [1, 2, 3, 4];
numbers: array[int, 10] = [1, 2, 3, 4];
numbers += 9..14;

/*-------------------
** List
** not same type data type surround by []
** 
*--------------------
my_list: list [string, int, float] = ["milk", 1, 3.12, "hello"];
person: list[string, int];
person = ["John Doe", 42, "London"];

Person : type : type(list[string, int]);
peter: Person = ["Peter Parker", 19];

/*-------------------
** map aka dict
** key value based data structure 
** 
*--------------------
var_name : map[kt: vt] = [k: v, k: v];
var_name : [kt: vt] = [k: v, k: v];

/* example */
person : [string: string] = ["name": "John Doe", "age": "42"];
/* type infer */
person := ["name": "John Doe", "age": "42"];

person.get("name");  /* => John Doe */
person["age"]; /* => 42 */


/-------------------
** if
** 
** 
*--------------------
age := 5;
is_adult: false;
if age >= 18 {
    is_adult = true;
} else {
    is_adult = false;
}

/* if expression */    
is_adult: bool = if age > = 18 {true;} else {false;}



/*-------------------
** for
** 
** 
*--------------------
numbers := [10, 20, 30];

for number in numbers {
    print(number);
}

/* range loop */
for i in 1..10 {
}

/* infinte loop */

for true {

}

for {

} 

/* conditional for */
i := 0;
for i < 10 {

    i++;    
}

/* create defualt `it` as iterator */
for items {
    print(it);
}

/*-------------------
** Struct
** 
** 
*--------------------
Person :: struct {
    name: str;
    age: int;
    city: str;
}

peter = Person(name="Peter Parker", age=23, city="NY");
peter.name; /* => Peter Parker */

/* method */
Person.is_adult :: (self: Self) -> bool {
    if self.age >= 18 {
        return true;
    } else {
        return false;
    }
}
peter.is_adult(); /* => true */
Person.is_adult(peter); /* => true */

/* what about this syntax */
@method(Person);
is_adult :: (self: Self) -> bool {
    if self.age >= 18:
        return true;
    return false;
}
peter.is_adult(); /* => true */

