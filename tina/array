/* 
** Array or list 
** Same type values.
*/

var_name : [<type>, <length>] = [val1, val2, val3];
var_name : [<type>, ...] = [val1, val2, val3, ...];
var_name : [<type>] = [val1, val2, val3, ...];

names: [string, 3] = ["John", "Bob", "Kate"];

/* ... mean daynamic length which is the defualt in arrays */
names : [string, ...] = ["John", "Bob", "Kate"];

/* the length of the array alwayse is the last value in type hint */
names : [string, 10] = ["Elon", "Jeff", "Steve"];
names.push("Robbert");
names.push("Andrew");

names[0..3];  /* => ["Elon", "Jeff", "Steve"] */


/* vector */
vector: [int, 3];
vector.push(1);
vector.push(4);
vector.push(9);

/* or */
vector.extend([1, 4, 9]);

/* what if the data is somewhere else */
data = [1, 4, 9];
vector.extend(data);

a1 : array[int] = [1, 2, 3];
a2 : array[int] = [3, 2, 1];
assert(len(a1) == len(a2)); 

new_arr := a1 + a2;  /* => [1, 2, 3, 3, 2, 1] */

mylist : List[int, str];
mylist := [1, 2, 3] + ['a', 'b', 'c'];

/* slice array ?????
  a := [1, 2, 3, 4, 5, 6];
  a[0..4]   // => [1, 2, 3]
  a[..4]   // => [1, 2, 3]
  a[4..a.length] // => [5, 6]
  a[4..]  // => [5, 6]
  // or maybe even get rid of [..] and use methods
*/

/* like this one */
a := [1, 2, 3, 4, 5, 6];
// start, end, step
a.slice(0, 4, 2);

cal := a.sort()
        .reverse()
        .map(x => x ** 2); // [36, 25, 16, 9, 4, 1]


a := [[1, 2, 3], [4, 5, 6]];

