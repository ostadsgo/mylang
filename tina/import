/* every module is just jet lang file
** import a module 
*/

math :: import("math.jet");

* import all name in global state not recommend bad practice */
import("math.jet");

/* import from custom path */
mymod :: import("~/programs/libs/mymodule.jet");


/* using methods and functions of a module */
math.log2(16);  /* 4.0 */
math.pow(2, 3); /* 8.0 */

/* example of usefulness of global importing names */
import("aliases.jet");


/* inside of aliases 
** type aliases.

i32 :: alias(int32);
i64 :: alias(int64);
i128 :: alias(int128);

*/

x : i32;
y : i128;


/* alias name of functions or method that imported from a module. */
math :: import("math.jet);
/* or */
logrithm2 :: math.log2; /* not call the function make ref to func */


/* export problem while you have same function name with different parameter
** If the language have the feature of function overwritting which is going to be happend
** with the functions have the same name with different parameters how you are going to 
** export them?
**/


math :: import("math");
PI :: math.PI;
exports = [
    add(a, b: int),
];
export(...exports); /* which add function? */

add :: (a, b: int) -> int {
    return a + b * PI;
}

add :: (a, b, c: int) -> int {
    return a + b + c;
}








