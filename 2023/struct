/* Maybe use the word type insted of struct */
Person := struct {
    name: string;
    age: int;
}

peter = Person();
peter.name = "Peter Parker";
peter.age = 23;

bob = Person(name="Bob Doe", age=20);


// Create method for a struct 
// 1
@method(Person)
info := (self: Person) -> string {
    return "My name is {self.name} and I am {age} years old.";
}

peter.info();
bob.info();
Person.info(peter);
Person.info(bob);

// 2
Person.info := (self: Person) -> string {
    return "My name is {self.name} and I am {age} years old.";
}

peter.info();
bob.info();
Person.info(peter);
Person.info(bob);



/* print information for the peter struct */
info := function(person: Person) {
    print("My name is {person.name} and I am {person.age} year old.");
}


info(peter);


/* print information using struct method syntax */
Person.info := function(self) {
    print("My name is {self.name} and I am {self.age} year old.");
}

peter.info();
Person.info(peter);



;; create struct function

Person :: struct(name: string, age: uint, country: string);

;; Create method for the Person struct.
Person.is_adult :: (self) -> bool {
  if self.age >= 18 {
    return true;
  } else {
    return false;
  }
}

;; Create method for the Person struct.
Person.is_adult :: (self) => true if self.age >= 18 else false;


;; create new type
ShoppingList :: type(list[string]);

grocery: ShoppingList = ["Milk", "Bread", "Banana"];

