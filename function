
// functions
// Am I need a function keyword
// functions are ananymous by defualt.

let add = function(int a, int b) -> {
	return a + b;
}

// why we can drop function keyword
// firt function keyword is look like a function call and I don't like it.
// We already using () to define params so we can make () to be function defenation and get rid off function keyword
let add = (int a, int b) -> int {
	return a + b;
}

// We can make it more consice with assumation that last statement is the return statement.
// We will have return key obviously we don't get rid of it with this simple assumption we make code consice.
let add = (int a, int b) -> int {
	a + b;
}

// If our function body is simple with one line we can get ridd of {} with arrow syntax
let add = (int a, int b) -> int => a + b;

// we alwyse can relay on compiler type detection 
// compiler will get two value and return sum of them if it possiable otherwise it could be an error.
let add = (a, b) => a + b;

let area = method (Rect r) (int width, int height) => width * height;
let area = method (Circle c) (int radius) => 2 * 3.14 * radius;

let Person = struct {
	string name;
	int age;
	string location;
}

peter = Person("Peter Parker", 20, "NY");
peter.name; // Peter parker
peter.age; // 20



